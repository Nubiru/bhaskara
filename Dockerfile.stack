# Simple Stack Dockerfile - Frontend + Backend in one container
# Uses supervisord for process management (much simpler than s6-overlay)
# @version 1.0.0
# @author Software Engineer
# @since 2025-08-20
# @lastModified 2025-08-21

# Stage 1: Frontend Build
FROM node:20-alpine AS frontend-builder
WORKDIR /app
COPY frontend/package*.json ./
RUN npm ci
COPY frontend/ ./
RUN npm run build

# Stage 2: Runtime with both frontend and backend
FROM python:3.12-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    nginx \
    supervisor \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY backend/requirements.txt /tmp/
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# Copy backend code
COPY backend/ /app/backend/

# Copy frontend build
COPY --from=frontend-builder /app/build/client /usr/share/nginx/html

# Configure nginx (simple inline config)
RUN rm -f /etc/nginx/sites-enabled/default && \
    echo 'server { \
    listen 80; \
    root /usr/share/nginx/html; \
    index index.html; \
    location / { try_files $uri $uri/ /index.html; } \
    location /api/ { \
        proxy_pass http://127.0.0.1:8081/; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
    } \
}' > /etc/nginx/sites-available/default && \
    ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/

# Configure supervisord with proper log paths
RUN echo '[supervisord] \n\
nodaemon=true \n\
logfile=/var/log/supervisord.log \n\
logfile_maxbytes=50MB \n\
logfile_backups=10 \n\
loglevel=info \n\
pidfile=/var/run/supervisord.pid \n\
[program:nginx] \n\
command=nginx -g "daemon off;" \n\
autostart=true \n\
autorestart=true \n\
stdout_logfile=/var/log/nginx.log \n\
stderr_logfile=/var/log/nginx-error.log \n\
priority=100 \n\
[program:backend] \n\
command=uvicorn app.main:app --host 127.0.0.1 --port 8081 \n\
directory=/app/backend \n\
autostart=true \n\
autorestart=true \n\
stdout_logfile=/var/log/backend.log \n\
stderr_logfile=/var/log/backend-error.log \n\
priority=200 \n\
startretries=3 \n\
startsecs=5 \n\
redirect_stderr=true \n\
stdout_logfile_maxbytes=50MB \n\
stdout_logfile_backups=10' > /etc/supervisor/conf.d/supervisord.conf

# Create log directories with proper permissions
RUN mkdir -p /var/log && \
    touch /var/log/supervisord.log /var/log/nginx.log /var/log/nginx-error.log /var/log/backend.log /var/log/backend-error.log && \
    chmod 755 /var/log && \
    chmod 644 /var/log/*.log && \
    chown -R root:root /var/log

# Create export directory with proper permissions
RUN mkdir -p /tmp/exports && \
    chmod 755 /tmp/exports && \
    chown -R root:root /tmp/exports

# Create startup script for better error handling
RUN echo '#!/bin/bash \n\
echo "Starting MutualMetrics Stack..." \n\
echo "Checking dependencies..." \n\
which nginx || { echo "Nginx not found"; exit 1; } \n\
which uvicorn || { echo "Uvicorn not found"; exit 1; } \n\
echo "Checking Python modules..." \n\
python -c "import app.main; print(\"✓ Main module import successful\")" || { echo "✗ Main module import failed"; exit 1; } \n\
echo "Starting supervisord..." \n\
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf' > /app/start.sh && \
    chmod +x /app/start.sh

WORKDIR /app/backend
EXPOSE 80 8081

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8081/health || exit 1

CMD ["/app/start.sh"]
